import control
import matplotlib.pyplot as plt

#تابع تبدیل 1 
num1 = [1, 3, 2]
den1 = [1, 1, 1, -3]
#تابع تبدیل 2
num2 = [1, 1, 0] 
den2 = [1, 7, 6, -82, 68]


sys1 = control.TransferFunction(num1, den1)
sys2 = control.TransferFunction(num2, den2)
control.root_locus(sys1)
plt.title('Root Locus of GH(s) for K > 0')
plt.xlabel('Real Axis')
plt.ylabel('Imaginary Axis')
plt.grid(True)
plt.show()

control.root_locus(sys2)
plt.title('Root Locus of GH(s) for K > 0')
plt.xlabel('Real Axis')
plt.ylabel('Imaginary Axis')
plt.grid(True)
plt.show()

#Quastion 1

__________________________________________________________________________________________________________________________________

import sympy as sp

K = sp.Symbol('K', real=True)
s = sp.Symbol('s')

eq = s**3 + 18*s**2 + 77*s + K

a3 = 1
a2 = 18
a1 = 77
a0 = K

r1 = (a2*a1 - a3*a0)/a2

kritik_k = sp.solve(r1, K)[0]
range_stable = sp.solve(r1 > 0, K)

print("پایداری: 0 < K <", int(kritik_k))
print("پایداری بحرانی: K =", int(kritik_k))
print("ناپایداری: K <=", 0, "یا K >", int(kritik_k))

#Quastion 2
__________________________________________________________________________________________________________________

def routh_table(coeffs):
    n = len(coeffs)
    rows = (n + 1) // 2
    table = [[0.0 for _ in range(rows)] for _ in range(n)]

    
    table[0][:len(coeffs[0::2])] = coeffs[0::2]  
    table[1][:len(coeffs[1::2])] = coeffs[1::2]  
    for i in range(2, n):
        for j in range(rows - 1):
            a = table[i - 2][0]
            b = table[i - 2][j + 1]
            c = table[i - 1][0]
            d = table[i - 1][j + 1]
            if c == 0:
                c = 1e-6  
            table[i][j] = ((c * b) - (a * d)) / c

    return table

# ضرایب تابع مشخصه 
#coeffs = [2, 9, 6, 4, 8, 8, 2, 6]
#coeffs = [2, 4, 2, 3, 2, 5]
#coeffs = [1, 1, 12, 22, 39, 59, 48, 38, 20]


table = routh_table(coeffs)

for i, row in enumerate(table):
    print(f"Row {i}: {row}")

#  هر سه سیستم ناپایدار هستند
#Quastion 3

_____________________________________________________________________________________________________

import numpy as np
from scipy.optimize import fsolve

zeta = 0.5

def eqs(v):
    wn, k, p = v
    re = -zeta * wn
    im = wn * np.sqrt(1 - zeta**2)
    s1 = complex(re, im)
    s2 = complex(re, -im)
    a = -2 * re
    b = abs(s1)**2
    e1 = a - p - 9
    e2 = b - a * p - 18
    e3 = -b * p - k
    return [e1, e2, e3]

sol = fsolve(eqs, (1, 10, -1))
wn, k, p = sol

Kv = k / (3 * 6)
ess = 1 / Kv

print("k =", round(k, 4))

print("Kv =", round(Kv, 4))

print("ess =", round(ess, 4))

#Question4
